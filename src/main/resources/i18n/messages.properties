numeric.mnemonic.resolver = name.ball.joshua.craftinomicon.recipe.i18n.numeric.OneAndOtherNumericMnemonicResolver

navigation.previous = Previous
navigation.next = Next
navigation.back = Back

recipe-click.num-recipes#one = 1 recipe (Left-click)
recipe-click.num-recipes#other = ${num-recipes} recipes (Left-click)

# If a plural variant is omitted, it defaults to 'other'. The following 4 properties do
# not need to be defined in English, but they are shown here for completeness.
# See http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
#   for the meaning of each of these.
recipe-click.num-recipes#two = ${num-recipes} recipes (Left-click)
recipe-click.num-recipes#few = ${num-recipes} recipes (Left-click)
recipe-click.num-recipes#many = ${num-recipes} recipes (Left-click)

usage-click.num-usages#one = 1 usage (Right-click)
usage-click.num-usages#other = ${num-usages} usages (Right-click)
usage-click.num-usages#two = ${num-usages} usages (Right-click)
usage-click.num-usages#few = ${num-usages} usages (Right-click)
usage-click.num-usages#many = ${num-usages} usages (Right-click)

type.crafting = The above recipe is for placing in a crafting grid.
type.furnace = The above recipe is for placing in a furnace.

title = Craftinomicon

# for unparameterized messages, I'm thinking of just injecting them with a custom annotation, e.g.
# @Message(key="recipe.type.furnace", english="The above recipe is for placing in a furnace.") String furnaceMessage;
# at injection time, the message.english is checked for consistency with the English translation in the resource file
# Keeping the (English) message stored in the source code and not only in the resource file makes the
# code easier to understand.

# for parameterized messages, I think I'm just going to create interfaces for each signature of parameterization, so
# public interface RecipesMessageProvider { String numRecipes(int n); }
# public interface UsagesMessageProvider { String numUsages(int n); }
# a single InvocationHandler can be used to implement both.
# at site, they might be used like
# @Message(key="recipe-click.num-recipes", english="${num-recipes} recipes (Left-click)") RecipesMessageProvider numRecipes;
# notice that the key is not something that appears anywhere in the properties file
